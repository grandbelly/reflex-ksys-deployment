"""
ÏïåÎûå Ïù¥Î†• ÌéòÏù¥ÏßÄ - Í∞ÑÎã®Ìïú Î≤ÑÏ†Ñ
ÏûëÏÑ±Ïùº: 2025-09-26
"""

import reflex as rx
from datetime import datetime, timezone, timedelta
from ..states.alarm_hist_state import AlarmHistState
from ..components.layout import shell
from ..components.page_header import page_header

# KST ÏãúÍ∞ÑÎåÄ
KST = timezone(timedelta(hours=9))

def format_kst_time_str(dt_str: str) -> str:
    """UTC Î¨∏ÏûêÏó¥ÏùÑ KSTÎ°ú Î≥ÄÌôòÌïòÏó¨ ÌëúÏãú"""
    if dt_str:
        try:
            dt = datetime.fromisoformat(dt_str.replace('Z', '+00:00'))
            return dt.replace(tzinfo=timezone.utc).astimezone(KST).strftime("%Y-%m-%d %H:%M:%S")
        except:
            return dt_str
    return "-"

def alarms_hist_page() -> rx.Component:
    """ÏïåÎûå Ïù¥Î†• Î©îÏù∏ ÌéòÏù¥ÏßÄ"""
    return shell(
        rx.vstack(
            # Ìó§Îçî
            rx.heading("üìä ÏïåÎûå Ïù¥Î†• Î∂ÑÏÑù", size="4"),

            # ÎÇ†Ïßú ÌïÑÌÑ∞
            rx.hstack(
                rx.input(
                    type="datetime-local",
                    value=AlarmHistState.start_date,
                    on_change=AlarmHistState.set_start_date,
                    width="200px",
                ),
                rx.text("~"),
                rx.input(
                    type="datetime-local",
                    value=AlarmHistState.end_date,
                    on_change=AlarmHistState.set_end_date,
                    width="200px",
                ),
                rx.button(
                    "Ï°∞Ìöå",
                    on_click=AlarmHistState.fetch_history,
                    color_scheme="blue",
                    size="2",
                ),
                spacing="2",
            ),

            # ÌÜµÍ≥Ñ Ïπ¥Îìú
            rx.hstack(
                rx.box(
                    rx.vstack(
                        rx.text("Ï¥ù ÏïåÎûå", font_size="sm"),
                        rx.text(AlarmHistState.total_alarms, font_size="xl", font_weight="bold"),
                        rx.text(AlarmHistState.date_range, font_size="xs", color="gray.500"),
                        spacing="1",
                    ),
                    padding="4",
                    bg="gray.50",
                    border_radius="lg",
                    width="100%",
                ),
                rx.box(
                    rx.vstack(
                        rx.text("ÏµúÎã§ ÏÑºÏÑú", font_size="sm"),
                        rx.text(AlarmHistState.top_sensor, font_size="xl", font_weight="bold"),
                        rx.text(f"{AlarmHistState.top_sensor_count}Í±¥", font_size="xs", color="gray.500"),
                        spacing="1",
                    ),
                    padding="4",
                    bg="blue.50",
                    border_radius="lg",
                    width="100%",
                ),
                rx.box(
                    rx.vstack(
                        rx.text("ÌèâÍ∑† Î†àÎ≤®", font_size="sm"),
                        rx.text(f"{AlarmHistState.avg_level:.2f}", font_size="xl", font_weight="bold"),
                        rx.text("5Ï†ê ÎßåÏ†ê", font_size="xs", color="gray.500"),
                        spacing="1",
                    ),
                    padding="4",
                    bg="yellow.50",
                    border_radius="lg",
                    width="100%",
                ),
                rx.box(
                    rx.vstack(
                        rx.text("Ìï¥Í≤∞Ïú®", font_size="sm"),
                        rx.text(f"{AlarmHistState.resolution_rate:.2f}%", font_size="xl", font_weight="bold"),
                        rx.text(f"{AlarmHistState.resolved_count}/{AlarmHistState.total_alarms}", font_size="xs", color="gray.500"),
                        spacing="1",
                    ),
                    padding="4",
                    bg="green.50",
                    border_radius="lg",
                    width="100%",
                ),
                spacing="4",
                width="100%",
            ),

            # ÏïåÎûå Ïù¥Î†• Î¶¨Ïä§Ìä∏
            rx.vstack(
                rx.foreach(
                    AlarmHistState.alarm_history,
                    lambda alarm: rx.box(
                        rx.hstack(
                            rx.vstack(
                                rx.text(
                                    alarm["triggered_at"],
                                    font_size="sm",
                                    color="gray.600"
                                ),
                                rx.text(alarm["tag_name"], font_weight="bold"),
                                spacing="1",
                                width="25%",
                            ),
                            rx.vstack(
                                rx.text("Î†àÎ≤®", font_size="xs", color="gray.500"),
                                rx.badge(
                                    rx.cond(
                                        alarm["level"] == 5,
                                        "EMERGENCY",
                                        rx.cond(
                                            alarm["level"] == 4,
                                            "CRITICAL",
                                            rx.cond(
                                                alarm["level"] == 3,
                                                "WARNING",
                                                rx.cond(
                                                    alarm["level"] == 2,
                                                    "CAUTION",
                                                    "INFO"
                                                )
                                            )
                                        )
                                    ),
                                    color_scheme=rx.cond(
                                        alarm["level"] == 5,
                                        "red",
                                        rx.cond(
                                            alarm["level"] == 4,
                                            "red",
                                            rx.cond(
                                                alarm["level"] == 3,
                                                "yellow",
                                                rx.cond(
                                                    alarm["level"] == 2,
                                                    "orange",
                                                    "blue"
                                                )
                                            )
                                        )
                                    )
                                ),
                                spacing="1",
                                width="15%",
                            ),
                            rx.vstack(
                                rx.text("ÏãúÎÇòÎ¶¨Ïò§", font_size="xs", color="gray.500"),
                                rx.badge(
                                    alarm["scenario_id"],
                                    variant="soft",
                                    color_scheme=rx.cond(
                                        alarm["scenario_id"] == "AI_BASE",
                                        "purple",
                                        rx.cond(
                                            alarm["scenario_id"] == "DYNAMIC_RULE",
                                            "blue",
                                            "gray"
                                        )
                                    )
                                ),
                                spacing="1",
                                width="15%",
                            ),
                            rx.vstack(
                                rx.text("Í∞í", font_size="xs", color="gray.500"),
                                rx.text(f"{alarm['value']:.2f}", font_weight="bold"),
                                spacing="1",
                                width="10%",
                            ),
                            rx.vstack(
                                rx.text("Î©îÏãúÏßÄ", font_size="xs", color="gray.500"),
                                rx.text(
                                    alarm["message"],
                                    font_size="sm",
                                    max_width="200px",
                                    overflow="hidden",
                                    text_overflow="ellipsis"
                                ),
                                spacing="1",
                                width="25%",
                            ),
                            rx.vstack(
                                rx.text("ÏÉÅÌÉú", font_size="xs", color="gray.500"),
                                rx.hstack(
                                    rx.cond(
                                        alarm["acknowledged"],
                                        rx.icon("check", size=16, color="green"),
                                        rx.icon("x", size=16, color="gray"),
                                    ),
                                    rx.badge(
                                        rx.cond(
                                            alarm["resolved"],
                                            "Ìï¥Í≤∞",
                                            "ÌôúÏÑ±"
                                        ),
                                        color_scheme=rx.cond(
                                            alarm["resolved"],
                                            "green",
                                            "red"
                                        ),
                                        size="1"
                                    ),
                                    spacing="1",
                                ),
                                spacing="1",
                                width="10%",
                            ),
                            width="100%",
                            justify="between",
                        ),
                        padding="4",
                        bg="white",
                        border="1px solid",
                        border_color="gray.200",
                        border_radius="lg",
                        _hover={"border_color": "gray.400"},
                    )
                ),
                spacing="2",
                width="100%",
            ),

            # ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò
            rx.hstack(
                rx.button(
                    "Ïù¥Ï†Ñ",
                    on_click=AlarmHistState.prev_page,
                    disabled=AlarmHistState.current_page == 1,
                    size="2",
                ),
                rx.text(f"ÌéòÏù¥ÏßÄ {AlarmHistState.current_page} / {AlarmHistState.total_pages}"),
                rx.button(
                    "Îã§Ïùå",
                    on_click=AlarmHistState.next_page,
                    disabled=AlarmHistState.current_page == AlarmHistState.total_pages,
                    size="2",
                ),
                justify="center",
                width="100%",
            ),

            spacing="4",
            padding="4",
            width="100%",
            on_mount=AlarmHistState.on_load,
        )
    )